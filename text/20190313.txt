프로그램(UI)은 GUI(그래픽으로 만듬) 와 CUI(콘솔로 만듬) 로 나뉘어 진다.


 Client -> S/W 프로그램         Server -> 어떤 서비스를 제공하는 프로그램 

통신 방식의 TCP / IP 가 90프로 이상을 사용하고 있다. HTTP 역시 TCP / IP 상에서 동작을 하고 있다.

----------------------------------------------------------------------------------------------


어플리케이션 ->  C  OS  H/W  를 가지고 있는 예) 스마트폰

		 S  OS  H/W               
-> API   SDK(표준적으로 개발하는데 사용되는 도구) 의 기능들을 가져다 쓴다.


Server 에서는 Network를 가져다 쓰는데 크게는 API라고 하는데 이는 Network Library라고 한다.
이는 Socket Library라고 한다. 

API = Network Library = Socket Library

-----------------------------------------------------------------------------------------------
데이터를 정렬하는 방식

데이터(숫자) - big_endian
	     - little_endian

데이터는 보조기억장치(HDD / SSD) 에 저장을 한다.

프로그램을 실행하기 위해서는 CPU에서 인식을 하는 것을 알고 있어야 한다.

CPU  <---->  RAM 

램을 통해서 CPU에 HDD / SSD 의 데이터를 인식해줘야 한다.

데이터를 쓸때마다 address 주소를 가지게 된다. 1개의 주소를 쓰면 1Byte를 저장하는데 만약에 2바이트의 크기를 저장해야하는 경우에는 2개의 주소를 사용해야 한다. Ox1234 라고 하자 16진수니까 한자리마다 4bit를 가지게 된다. 12 34 각각 1바이트의 크기를 가지는데 4 5 번의 주소에서 4번주소에 12 5번주소에 34를 담는 큰값주소에 큰값을 담는것을  big_endian이라 하고 4번 주소에 34 5번주소에 12를 담는 것을 little_endian 이라고 한다.

TCP/IP를 사용하는 Network는 기본적으로 big_endian을 사용하고 있다.

포트번호를 결정하기 위해서는 처음에 접속할 때 결정을 해줘야 한다. -> 내 기계가 little_endian 이면 big_endian으로 바꾸고  big_endian이면  big_endian으로 두면 된다.

-----------------------------------------------------------------------------------------------
구조체를 멤버정렬을 할때 구조체의 크기는 32비트 인지 64비트인지 os 의 차이에 따라서 구조체의 크기가 달라질수 있다..

char + int 로 5바이트의 크기를 차지하고 있는데 

CPU로 데이터를 나누는 바이트의 크기에 따라 달라진다. 32비트(4바이트)인지 64비트(8바이트) 인지

데이터를 나누는 어드레스가 정해져 있다 . 4바이트씩 나르는 경우에는 1바이트가 남기 때문에 8바이트로 짜리로 나르고 그중에 5바이트를 사용하고 3바이트는 비어있는 상태로 둔다. 이 비어있는 3바이트는 Padding Byte라고 한다.

#pragma pack(1) 는 1바이트씩 나눠서 쓰는데 좋은 코드는 아니다.-> 비효율적이기 때문에
